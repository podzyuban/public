NAME: pointservice-chart
LAST DEPLOYED: Sun May 17 16:34:48 2020
NAMESPACE: monitoring
STATUS: pending-install
REVISION: 1
HOOKS:
---
# Source: pointservice-chart/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "pointservice-chart-test-connection"
  labels:
    app.kubernetes.io/name: pointservice-chart
    helm.sh/chart: pointservice-chart-0.1.0
    app.kubernetes.io/instance: pointservice-chart
    app.kubernetes.io/version: "3.0.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args:  ['pointservice-chart:map[alias:web value:9000]']
  restartPolicy: Never
---
# Source: pointservice-chart/templates/migrationJob.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: "pointservice-chart"
  labels:
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "pointservice-chart"
    app.kubernetes.io/version: 3.0.0
    helm.sh/chart: "pointservice-chart-0.1.0"
  annotations:
    # This is what defines this resource as a hook. Without this line, the
    # job is considered part of the release.
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "-5"
    # "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    metadata:
      name: "pointservice-chart"
      labels:
        app.kubernetes.io/managed-by: "Helm"
        app.kubernetes.io/instance: "pointservice-chart"
        helm.sh/chart: "pointservice-chart-0.1.0"
    spec:
        restartPolicy: Never
        initContainers:
        - name: check-db-ready
          image: postgres:latest
          env:
            - name: POSTGRES_HOST
              valueFrom:
                configMapKeyRef:
                    name: pointservice-config
                    key: DatabaseConnectionString__Host
            - name: POSTGRES_PORT
              valueFrom:
                configMapKeyRef:
                    name: pointservice-config
                    key: DatabaseConnectionString__Port
          command:
            - sh
            - "-c"
            - |
              until pg_isready -h $POSTGRES_HOST  -p  $POSTGRES_PORT; 
              do echo waiting for database; sleep 2; done;
        containers:
        - name: migration
          image: podzyubandocker/pointservice:v10
          command: [ "dotnet", "PointService.DatabaseMigration.dll", "migration"]
          env:
          - name: DatabaseConnectionString__Host
            valueFrom:
              configMapKeyRef:
                  name: pointservice-config
                  key: DatabaseConnectionString__Host
          - name: DatabaseConnectionString__Database
            valueFrom:
              configMapKeyRef:
                  name: pointservice-config
                  key: DatabaseConnectionString__Database
          - name: DatabaseConnectionString__Port
            valueFrom:
              configMapKeyRef:
                  name: pointservice-config
                  key: DatabaseConnectionString__Port
          - name: DatabaseConnectionString__UserName
            valueFrom:
              secretKeyRef:
                  name: pointservice-config-secret
                  key: DatabaseConnectionString__UserName
          - name: DatabaseConnectionString__Password
            valueFrom:
              secretKeyRef:
                  name: pointservice-config-secret
                  key: DatabaseConnectionString__Password
MANIFEST:
---
# Source: pointservice-chart/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: pointservice-chart-postgresql
  labels:
    app: postgresql
    chart: postgresql-8.9.6
    release: "pointservice-chart"
    heritage: "Helm"
type: Opaque
data:
  postgresql-password: "cGFzc3dk"
---
# Source: pointservice-chart/templates/config.yaml
apiVersion: v1
kind: Secret
metadata:
    name: pointservice-config-secret
type: Opaque
data:
    DatabaseConnectionString__UserName: bXl1c2Vy
    DatabaseConnectionString__Password: cGFzc3dk
---
# Source: pointservice-chart/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
    name: pointservice-config
data:
    DatabaseConnectionString__Host: pointservice-chart-postgresql
    DatabaseConnectionString__Database: myapp
    DatabaseConnectionString__Port: "5432"  
    ASPNETCORE_ENVIRONMENT: Development
---
# Source: pointservice-chart/charts/postgresql/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: pointservice-chart-postgresql-headless
  labels:
    app: postgresql
    chart: postgresql-8.9.6
    release: "pointservice-chart"
    heritage: "Helm"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app: postgresql
    release: "pointservice-chart"
---
# Source: pointservice-chart/charts/postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: pointservice-chart-postgresql
  labels:
    app: postgresql
    chart: postgresql-8.9.6
    release: "pointservice-chart"
    heritage: "Helm"
  annotations:
spec:
  type: NodePort
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app: postgresql
    release: "pointservice-chart"
    role: master
---
# Source: pointservice-chart/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: pointservice-chart
  labels:
    app.kubernetes.io/name: pointservice-chart
    helm.sh/chart: pointservice-chart-0.1.0
    app.kubernetes.io/instance: pointservice-chart
    app.kubernetes.io/version: "3.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: NodePort
  ports:
    - port: 9000
      targetPort: web
      protocol: TCP
  selector:
    app.kubernetes.io/name: pointservice-chart
    app.kubernetes.io/instance: pointservice-chart
---
# Source: pointservice-chart/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pointservice-chart
  labels:
    app.kubernetes.io/name: pointservice-chart
    helm.sh/chart: pointservice-chart-0.1.0
    app.kubernetes.io/instance: pointservice-chart
    app.kubernetes.io/version: "3.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: pointservice-chart
      app.kubernetes.io/instance: pointservice-chart
  template:
    metadata:
      labels:
        app.kubernetes.io/name: pointservice-chart
        app.kubernetes.io/instance: pointservice-chart
      annotations:
        checksum/config: 986e73846805d233e0d59b59f0346276599f7f616e6b163ba37406a49cbdd977
    spec:
      initContainers:
        - name: check-db-ready
          image: postgres:latest
          env:
            - name: POSTGRES_HOST
              valueFrom:
                configMapKeyRef:
                    name: pointservice-config
                    key: DatabaseConnectionString__Host
            - name: POSTGRES_PORT
              valueFrom:
                configMapKeyRef:
                    name: pointservice-config
                    key: DatabaseConnectionString__Port
          command:
            - sh
            - "-c"
            - |
              until pg_isready -h $POSTGRES_HOST  -p  $POSTGRES_PORT; 
              do echo waiting for database; sleep 2; done;
      containers:
      - name: pointservice-chart
        image: podzyubandocker/pointservice:v10
        ports:
          - name: web
            containerPort: 80
            protocol: TCP
        env:
        - name: DatabaseConnectionString__Host
          valueFrom:
            configMapKeyRef:
                name: pointservice-config
                key: DatabaseConnectionString__Host
        - name: DatabaseConnectionString__Database
          valueFrom:
            configMapKeyRef:
                name: pointservice-config
                key: DatabaseConnectionString__Database
        - name: DatabaseConnectionString__Port
          valueFrom:
            configMapKeyRef:
                name: pointservice-config
                key: DatabaseConnectionString__Port
        - name: DatabaseConnectionString__UserName
          valueFrom:
            secretKeyRef:
                name: pointservice-config-secret
                key: DatabaseConnectionString__UserName
        - name: DatabaseConnectionString__Password
          valueFrom:
            secretKeyRef:
                name: pointservice-config-secret
                key: DatabaseConnectionString__Password
        - name: ASPNETCORE_ENVIRONMENT
          valueFrom:
            configMapKeyRef:
                name: pointservice-config
                key: ASPNETCORE_ENVIRONMENT
        startupProbe:
            httpGet:
                path: /startup
                port: web
            failureThreshold: 5
            periodSeconds: 10   
        readinessProbe:
            httpGet:
                port: web
                path: /health
            initialDelaySeconds: 10
            periodSeconds: 5
---
# Source: pointservice-chart/charts/postgresql/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: pointservice-chart-postgresql
  labels:
    app: postgresql
    chart: postgresql-8.9.6
    release: "pointservice-chart"
    heritage: "Helm"
  annotations:
spec:
  serviceName: pointservice-chart-postgresql-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: postgresql
      release: "pointservice-chart"
      role: master
  template:
    metadata:
      name: pointservice-chart-postgresql
      labels:
        app: postgresql
        chart: postgresql-8.9.6
        release: "pointservice-chart"
        heritage: "Helm"
        role: master
    spec:      
      securityContext:
        fsGroup: 1001
      containers:
        - name: pointservice-chart-postgresql
          image: docker.io/bitnami/postgresql:11.7.0-debian-10-r99
          imagePullPolicy: "IfNotPresent"
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            - name: POSTGRES_USER
              value: "myuser"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: pointservice-chart-postgresql
                  key: postgresql-password
            - name: POSTGRES_DB
              value: "myapp"
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "myuser" -d "myapp" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "myuser" -d "myapp" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
              subPath: 
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
            sizeLimit: 1Gi
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: pointservice-chart/templates/ingress.yaml
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: pointservice-chart
  labels:
    app.kubernetes.io/name: pointservice-chart
    helm.sh/chart: pointservice-chart-0.1.0
    app.kubernetes.io/instance: pointservice-chart
    app.kubernetes.io/version: "3.0.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /$2
spec:
  rules:
    - host: "arch.homework"
      http:
        paths:
          - path: /otusapp($|/)(.*)
            backend:
              serviceName: pointservice-chart
              servicePort: 9000
---
# Source: pointservice-chart/templates/serviceMonitor.yaml
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: pointservice-chart
  labels:
    app.kubernetes.io/name: pointservice-chart
    helm.sh/chart: pointservice-chart-0.1.0
    app.kubernetes.io/instance: pointservice-chart
    app.kubernetes.io/version: "3.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  jobLabel: pointservice-chart
  namespaceSelector:
    matchNames:
    - "monitoring"
  selector:
    matchLabels:
      app.kubernetes.io/name: pointservice-chart
      app.kubernetes.io/instance: pointservice-chart
  endpoints:
  - interval: 15s
    port: web
    path: /metrics

NOTES:
1. Get the application URL by running these commands:
  http://arch.homework/otusapp($|/)(.*)

apiVersion: v1
data:
  stresstest.js: "import http from 'k6/http';\r\nimport { check } from 'k6';\r\n\r\n\r\nexport
    let options = { \r\nmaxRedirects: 4,\r\nduration: __ENV.DURATION,\r\nrps: __ENV.RPS,\r\n
    };\r\n \r\n let params = {\r\n    headers: {\r\n\t   Host: ''+__ENV.APPHOSTNAME+'',\r\n
    \     'Content-Type': 'application/json; charset=utf-8',\r\n      'accept': 'text/plain',\r\n\t
    \ 'Accept-Encoding':'gzip, deflate, br',\r\n\t  'Connection':'keep-alive',\r\n\t
    \ 'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML,
    like Gecko) Chrome/81.0.4044.138 Safari/537.36'\r\n    },\r\n  };\r\n\r\n\r\nfunction
    testGetUser(id, expectedName, url){\r\n\tlet urlpath = url+`/`+id;\r\n\t\r\n  let
    getUserResponse = http.get(urlpath, params);\r\n    \r\n  check(getUserResponse,
    {\r\n\t  'status is 200': (z)=>z.status ===200,\r\n\t  'name is corrent':(z)=>JSON.parse(z.body)['name']===expectedName\r\n
    \ });\r\n\r\n}\r\n\r\nexport default function() {\r\n\r\n\tconst url = 'http://'+__ENV.APPHOST+'/user';\r\n\tconst
    userName = 'sameUserName';\r\n\r\n\t\r\n  let createUser = JSON.stringify({name:
    userName});\r\n  let apphostname = __ENV.APPHOSTNAME;\r\n  \r\n  let createResponse
    = http.post(url, createUser, params);\r\n  \r\n  check(createResponse, {\"status
    is 200\": (z)=>z.status ===200});\r\n    \r\n  let userId = JSON.parse(createResponse.body)['id']\r\n
    \ \r\n  testGetUser(userId, userName, url);\r\n  \r\n  let userIdPath = url+`/`+userId;\r\n
    \ \r\n  let nextUserName = userName+'next';\r\n  \r\n  let updateUser = JSON.stringify({id:
    userId, name: nextUserName});\r\n  \r\n  let updateUserResponse = http.put(userIdPath,
    updateUser, params);\r\n  \r\n  check(updateUserResponse, {'status is 200': (z)=>z.status
    ===204});\r\n \r\n  testGetUser(userId, nextUserName, url);\r\n \r\n  \r\n  let
    deleteParams =  {\r\n    headers: {\r\n\t   Host: ''+__ENV.APPHOSTNAME+'',\r\n
    \     'Content-Type': 'application/json; charset=utf-8',\r\n      'accept': '*/*',\r\n\t
    \ 'Accept-Encoding':'gzip, deflate, br',\r\n\t  'Connection':'keep-alive',\r\n\t
    \ 'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML,
    like Gecko) Chrome/81.0.4044.138 Safari/537.36'\r\n\t  }};\r\n\r\n\tlet deleteResponse
    = http.del(userIdPath, {}, deleteParams);\r\n\t\r\n\tcheck(deleteResponse,{'status
    is 204': (z)=>z.status === 204});\r\n\t\r\n\tlet failedGetUserResponse = http.get(userIdPath,
    params);\r\n\t\r\n\tcheck(failedGetUserResponse,{'status is 500': (z)=>z.status
    === 500});\r\n  }\r\n\r\n"
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: k6f-file-config
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: k6f-config
data:
  apphostname: arch.homework
  apphost: nginx-nginx-ingress-controller:80/otusapp
  rps: '40'
  duration: '30m'
---
apiVersion: batch/v1
kind: Job
metadata:
  name: stresstest
spec:
  template:
    metadata:
      name: stresstest
    spec:
        containers:
        - name: stresstest
          image: loadimpact/k6
          command: ["k6", "run", "/k6f/stresstest.js"]
          env:
          - name: APPHOSTNAME
            valueFrom:
              configMapKeyRef:
                  name: k6f-config
                  key: apphostname
          - name: APPHOST
            valueFrom:
              configMapKeyRef:
                  name: k6f-config
                  key: apphost
          - name: RPS
            valueFrom:
              configMapKeyRef:
                  name: k6f-config
                  key: rps
          - name: DURATION
            valueFrom:
              configMapKeyRef:
                  name: k6f-config
                  key: duration
          volumeMounts:
          - name: k6f
            mountPath: /k6f
        restartPolicy: Never
        volumes:
        - name: k6f
          configMap:
            name: k6f-file-config
  backoffLimit: 0